public static int indexOf(int key, int []a)
{
    int lo = 0;
    int hi = a.length -1;

    while(lo<=hi)
    {
        int mid = lo + (hi-lo)/2;

        if(key == a[mid])
        {
            int ptr = mid;
            while(true)
            {
                if(ptr+1 < a.length)
                {
                    if(key == a[ptr+1])
                    {
                        ptr++;
                    }
                    else
                    {
                        return ptr;
                    }
                }
                else
                {
                    return ptr;
                }
            }
        }
        else if(key < a[mid])
        {
            hi = mid-1;
        }
        else
        {
            lo = mid+1;
        }
    }
    return -1;
}


public static int[] mergeHeaps(int[] maxHeap1, int[] maxHeap2)
{
    int[] mergedHeap = new int[maxHeap1.length + maxHeap2.length -1];
    //CORRECT +4
    for(int i = 1; i < maxHeap1.length; i++)
    {
        mergedHeap[i] = maxHeap1[i];
    }
    //CORRECT +4
    for(int i = 0; i+1 < maxHeap2.length; i++)
    {
        mergedHeap[i+maxHeap1.length] = maxHeap2[i+1];
    }
    //CORRECT +6
    for(int i = mergedHeap.length/2; i >=1; i--)
    {
        sink(mergedHeap, mergedHeap.length, i);
        //CORRECT +7
    }
    //CORRECT +5
    return mergedHeap;
    //CORRECT +1
}